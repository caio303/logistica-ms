server.port=${LOGISTICA_API_PORT:8083}

spring.main.allow-bean-definition-overriding=true

# Google Maps
spring.config.import=optional:file:.env[.properties]
logistica.api.maps.google-api-key=${LOGISTICA_GOOGLE_API_KEY}

# Database
logistica.api.db.name=${LOGISTICA_DB_NAME:logisticadb}
logistica.api.db.host=${LOGISTICA_DB_HOST:postgresql://localhost}
logistica.api.db.port=${LOGISTICA_DB_PORT:5432}
logistica.api.db.user=${LOGISTICA_DB_USER:postgres}
logistica.api.db.password=${LOGISTICA_DB_PASSWORD:postgres}
logistica.api.db.params=createDatabaseIfNotExist=true&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&connectionTimeZone=UTC

spring.datasource.url=jdbc:${logistica.api.db.host}:${logistica.api.db.port}/${logistica.api.db.name}?${logistica.api.db.params}
spring.datasource.username=${logistica.api.db.user}
spring.datasource.password=${logistica.api.db.password}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# Messaging
queue.kafka.defaultHost=localhost:9092
spring.kafka.bootstrap-servers=${LOGISTICA_BROKER_HOST:${queue.kafka.defaultHost}}
spring.cloud.stream.kafka.binder.brokers=${LOGISTICA_BROKER_HOST:${queue.kafka.defaultHost}}
spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=1

spring.kafka.consumer.group-id=logistica-group
spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10
#spring.cloud.stream.function.definition=estoqueInsuficienteConsumer;novoPedidoConsumer
spring.cloud.function.definition=estoqueInsuficienteConsumer;novoPedidoConsumer

# Consumidor do topico "novo-pedido-topic" (Novos pedidos)
spring.cloud.stream.bindings.novoPedidoConsumer-in-0.destination=novo-pedido-topic
spring.cloud.stream.bindings.novoPedidoConsumer-in-0.group=logistica-group
spring.cloud.stream.bindings.novoPedidoConsumer-in-0.content-type=application/json

# Consumidor do topico "estoque-insuficiente-topic" (Verificacao de estoque)
spring.cloud.stream.bindings.estoqueInsuficienteConsumer-in-0.destination=estoque-insuficiente-topic
spring.cloud.stream.bindings.estoqueInsuficienteConsumer-in-0.group=logistica-group
spring.cloud.stream.bindings.estoqueInsuficienteConsumer-in-0.content-type=application/json

# Produtor do topico "entrega-iniciada-topic" (Evento de entrega iniciada)
spring.cloud.stream.bindings.entregaIniciadaProducer-out-0.destination=entrega-iniciada-topic
spring.cloud.stream.bindings.entregaIniciadaProducer-out-0.content-type=application/json

# Produtor do topico "entrega-concluida-topic"
spring.cloud.stream.bindings.entregaConcluidaProducer-out-0.destination=entrega-concluida-topic
spring.cloud.stream.bindings.entregaConcluidaProducer-out-0.content-type=application/json

# Produtor do topico "status-entrega-topic" (Atualizacoes de entrega)
spring.cloud.stream.bindings.statusEntregaProducer-out-0.destination=entrega-status-topic
spring.cloud.stream.bindings.statusEntregaProducer-out-0.content-type=application/json